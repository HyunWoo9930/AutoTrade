name: Deploy to AWS EC2 K3s

on:
  push:
    branches:
      - main
      - master
  workflow_dispatch:

env:
  DOCKER_IMAGE: stock-trading-bot
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}

      - name: Add EC2 to known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy to EC2
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USER: ${{ secrets.EC2_USER }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          ssh -o StrictHostKeyChecking=no ${EC2_USER}@${EC2_HOST} << 'EOF'
            set -e

            # GitHub Container Registry 로그인
            echo ${{ secrets.GITHUB_TOKEN }} | sudo docker login ghcr.io -u ${{ github.actor }} --password-stdin

            # 최신 이미지 Pull
            sudo docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest

            # K3s에 이미지 import (k3s는 containerd 사용)
            sudo docker save ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest | sudo k3s ctr images import -

            # K8s 배포 디렉토리로 이동
            cd ~/stock_trading/k8s || exit 1

            # ConfigMap과 Secret 업데이트 (변경사항이 있을 경우)
            sudo kubectl apply -f configmap.yaml
            # Secret은 보안상 별도 관리 (이미 존재한다고 가정)

            # PVC 생성 (없는 경우에만)
            sudo kubectl apply -f pvc.yaml

            # CronJob 업데이트
            sudo kubectl apply -f cronjob-strategy.yaml
            sudo kubectl apply -f cronjob-morning.yaml
            sudo kubectl apply -f cronjob-evening.yaml

            # 배포 완료 확인
            sudo kubectl get cronjobs

            echo "✅ Deployment completed successfully!"
          EOF

      - name: Verify Deployment
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USER: ${{ secrets.EC2_USER }}
        run: |
          ssh -o StrictHostKeyChecking=no ${EC2_USER}@${EC2_HOST} << 'EOF'
            echo "=== CronJobs Status ==="
            sudo kubectl get cronjobs

            echo -e "\n=== Recent Jobs ==="
            sudo kubectl get jobs --sort-by=.metadata.creationTimestamp | tail -5

            echo -e "\n=== Pod Status ==="
            sudo kubectl get pods --sort-by=.metadata.creationTimestamp | tail -5
          EOF

  notify:
    needs: [build-and-push, deploy]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Send Discord notification
        if: env.DISCORD_WEBHOOK_URL != ''
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_SYSTEM }}
        run: |
          if [ "${{ needs.deploy.result }}" == "success" ]; then
            STATUS="✅ Success"
            COLOR="3066993"
          else
            STATUS="❌ Failed"
            COLOR="15158332"
          fi

          curl -H "Content-Type: application/json" \
            -d "{
              \"embeds\": [{
                \"title\": \"Stock Trading Bot Deployment\",
                \"description\": \"Deployment to AWS EC2 K3s\",
                \"color\": $COLOR,
                \"fields\": [
                  {\"name\": \"Status\", \"value\": \"$STATUS\", \"inline\": true},
                  {\"name\": \"Branch\", \"value\": \"${{ github.ref_name }}\", \"inline\": true},
                  {\"name\": \"Commit\", \"value\": \"${{ github.sha }}\", \"inline\": false},
                  {\"name\": \"Author\", \"value\": \"${{ github.actor }}\", \"inline\": true}
                ],
                \"timestamp\": \"$(date -u +%Y-%m-%dT%H:%M:%SZ)\"
              }]
            }" \
            $DISCORD_WEBHOOK_URL
